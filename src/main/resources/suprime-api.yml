openapi: '3.0.2'
 
info:
  title: Suprime API
  version: '1.0'
  contact:
    name: Suprime
    email: brownachris@yahoo.com
    url: www.example.com
   
servers:
  - url: http://localhost:8080
 
tags:
  - name: Suprime API

paths:
  /user:
    post:
      description: Creates a User and fills out their user profile
      operationId: createUser
      summary: Creates a user
      tags:
        - Users
      requestBody:
        description: create item in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: "successful operation"
  
  /user/createWithArray:
    post:
      summary: Creates list of users with given input array
      operationId: "createUsersWithArrayInput"
      tags:
        - Users
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        default:
          description: "successful operation"

  /user/login:
    get:
      summary: Logs user into the system
      operationId: loginUser
      tags:
      - Users
      parameters:
        - name: username
          in: query
          description: the user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username/password supplied

  /user/logout:
    get:
      description: ""
      summary: Logs out current logged in user session
      operationId: logoutUser
      tags:
      - Users
      parameters: []
      responses:
        default:
          description: OK

  /user/{username}:
    get:
      description: Retrieves the user's profile and displays their homepage
      operationId: getUser
      summary: Retrieves a user by username
      tags: 
        - Users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    
    put:
      description: Can only be done by the logged in user
      operationId: updateUser
      summary: Updates a user
      tags:
      - Users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found

    delete:
      description: Remove User information from the database
      operationId: deleteUser
      summary: Deletes user by username
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found

  /user/{username}/message:
    post:
      description: Posts message from user to team
      operationId: createMessage
      summary: Posts message to team
      tags:
        - Users
      requestBody:
        description: Adds message to array in User object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Message'
      responses:
        '200': 
          description: OK
        '400':
          description: Bad request

  /item:
    post:
      description: Create Item
      summary: Add item to inventory
      tags:
        - "Item"
      operationId: createItem
      requestBody:
        description: create item in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '500':
            description: Internal Sever Error
      security:
        - suprime_auth:
          - "write:items"
          - "read-items"

    put:
      description: Update Item
      summary: Update an existing Item
      tags:
        - "Item"
      operationId: updateItem
      requestBody:
        description: update item in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: "Invalid ID supplied"
        '404':
          description: "Item not found"
        '405':
          description: "Validation exception"
      security:
        - suprime_auth:
          - "write:items"
          - "read-items"
      
    get:
      description: Get all Items
      summary: Retrieve all items in the database
      tags:
          - "Item"
      operationId: getAllItems
      requestBody:
          description: get all items from database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '500':
            description: Internal Sever Error

  /item/{id}:
    get:
      description: Get a specific Item based on given itemId
      operationId: getItem
      summary: Fetch Item details for given id
      tags:
        - "Item"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    delete:
      description: Delete a specific Item based on given itemId
      operationId: deleteItem
      summary: Delete Item with given id
      tags: 
        - "Item"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      security:
        - suprime_auth:
          - "write:items"
          - "read-items"

  /shop/inventory:
    get:
      description: Returns all in-stock/out-of-stock items in the shop inventory
      operationId: getShopInventory
      summary: Returns shop inventory
      tags:
      - Shop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Item'
      security:
        - api_key: []
  
  /shop/order:
    post: 
      description: Place an order from the shop
      operationId: placeOrder
      summary: Places an order from the shop
      tags:
        - "Shop"
      requestBody:
        description: order placed
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order/properties/cart'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400': 
          description: Invalid order

  /shop/order/{orderId}:
    get:
      summary: Find order by ID
      description: search for order by order ID
      operationId: getOrderById
      tags:
      - "Shop"
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found order - {orderId}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '404':
          description: Order Not Found
        '500':
          description: Internal Server Error
    
    delete:
      summary: Delete purchase order by ID
      description: delete order by ID
      operationId: deleteOrder
      tags:
      - "Shop"
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid request
        '404':
          description: Order Not Found

components:      
  schemas:
    Item:
     description: This is an Item model/schema
     type: object
     required:
       - "itemId"
     properties:
       itemId:
        type: string
        description: Id of the item
        example: 12345
        minLength: 5
        maxLength: 8
       itemName:
        type: string
        example: Long sleeve top
        description: Name of the item
       category:
        type: string
        example: Shirts
       SKU:
        type: string
        example: J39HR7
       price:
        type: number
        example: 4.99
       description:
        type: string
        example: All cotton jersey crewneck with embroidered logo on chest
       image:
        type: string
       size:
        type: array
        items:
          type: string
          enum:
          - 'XS'
          - 'S'
          - 'M'
          - 'L'
          - 'XL'
          - 'XXL'

    User:
      description: This is the User model/schema
      type: object
      required:
        - "username"
        - "role"
        - "email"
        - "password"
      properties:
        username:
          type: string
          description: username of the user
          example: "user123"
          minLength: 3
        role:
          type: string
          enum:
            - 'user'
            - 'employee'
            - 'admin'
          default: 'user'
        email:
          type: string
          uniqueItems: true
        password:
          type: string
        profile:
          type: object
          additionalProperties: 
            $ref: '#/components/schemas/Profile'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'

    Order:
        description: This is the Order model/schema
        type: object
        required:
          - 'user'
          - 'cart'
          - 'orderId'
          - 'cartTotal'
        properties:
          User:
            type: object
            additionalProperties: 
              $ref: '#/components/schemas/User'
          orderId:
            type: string
            example: H3ll45h
          billingAddress:
            type: object
            additionalProperties: 
              $ref: '#/components/schemas/Profile'
          shippingAddress:
            type: object
            properties:
              street1: 
                type: string
                example: 123 Main st.
              street2:
                type: string
                example: apt 12
              city:
                type: string
                example: Midtown
              state:
                type: string
                example: NY
              country:
                type: string
                example: USA
              zip:
                type: string
                format: 'zip-code'
                example: 11203
          cart:
            type: array
            items:
              additionalProperties: 
              quantity: 
                type: number
              $ref: '#/components/schemas/Item'
          cartTotal:
            type: number
            format: double

    Message:
        description: This is the Message model/schema
        type: object
        required:
          - 'messageType'
          - 'messageBody'
        properties:
          Order:
            type: number
            additionalProperties: 
              $ref: '#/components/schemas/Order'
          User:
            type: object
            additionalProperties: 
              $ref: '#/components/schemas/User'
          messageType:
            type: string
            enum:
              - 'press'
              - 'general inquiries'
              - 'order status inquiries'
            default: 'order status inquiries'
          messageBody:
            type: string
          
    Profile:
        description: This is the Profile model/schema
        type: object
        properties:
          firstName:
            type: string
          lastName:
            type: string
          avatar:
            type: string
          bio:
            type: string
          address:
            type: object
            properties:
              street1: 
                type: string
                example: 123 Main st.
              street2:
                type: string
                example: apt 12
              city:
                type: string
                example: Midtown
              state:
                type: string
                example: NY
              country:
                type: string
                example: USA
              zip:
                type: string
                format: 'zip-code'
                example: 11203


  